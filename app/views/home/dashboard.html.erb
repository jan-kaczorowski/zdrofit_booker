<%# Background container %>
<div class="fixed inset-0 w-full h-full bg-linear-to-t from-sky-500 to-indigo-500"></div>

<%# Fixed Header Image with blur %>
<div class="fixed top-0 left-0 w-full h-64 sm:h-96 z-10 overflow-hidden">
  <%# Blurred background image %>
  <div class="absolute inset-0 backdrop-blur-sm">
    <img 
      src="https://images.unsplash.com/photo-1571902943202-507ec2618e8f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80"
      alt="People exercising in gym"
      class="w-full h-full object-cover opacity-90"
    />
  </div>
  <%# Gradient overlay %>
  <div class="absolute inset-0 bg-gradient-to-b from-black/30 to-black/50"></div>
</div>

<%# Content container %>
<div class="min-h-screen flex flex-col relative z-20">
  <%# Spacer to push content below fixed header %>
  <div class="h-64 sm:h-96"></div>

  <%# Title Section with backdrop blur %>
  <div class="text-center py-8 relative">
    <div class="absolute inset-0"></div>
    <h1 class="text-5xl sm:text-6xl font-bold text-white relative z-10 drop-shadow-lg">
      Welcome, <%= @user.email %>!
    </h1>
  </div>

  <%# Content Section %>
  <div class="py-6 flex flex-col justify-center sm:py-12">
    <div class="relative py-3 sm:max-w-7xl mx-auto w-full px-2">
      <div class="relative px-4 py-8 bg-white shadow-lg sm:rounded-3xl sm:p-12 w-full">
        <div class="w-full mx-auto">
          <div class="divide-y divide-gray-200">
            <div class="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7">
              <h2 class="text-2xl font-bold text-center mb-8 text-indigo-600">Available Clubs</h2>
              
              <% if flash[:error] %>
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                  <span class="block sm:inline"><%= flash[:error] %></span>
                </div>
              <% end %>

              <%# Update the styles %>
              <style>
                .dropdown-menu {
                  @apply absolute left-0 right-0 z-10 mt-2 bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5;
                  display: none;
                }

                .dropdown-menu.show {
                  display: block;
                }

                .dropdown-item {
                  @apply block w-full px-4 py-2 text-sm text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 cursor-pointer;
                }
              </style>

              <%# Update the dropdowns HTML %>
              <div class="mt-4 space-y-4">
                <%# Cities dropdown %>
                <div class="w-full">
                  <div class="dropdown relative">
                    <button id="city-dropdown" type="button" 
                            class="w-full inline-flex justify-between items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500" 
                            aria-haspopup="true" 
                            aria-expanded="false">
                      <span class="selected-city"><%= @user.last_city_id.presence || "Choose a city..." %></span>
                      <svg class="h-5 w-5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                    <div class="dropdown-menu hidden" role="menu">
                      <ul class="py-1">
                        <% @clubs.map { |club| club.dig('City', 'Name') }.uniq.sort.each do |city| %>
                          <li>
                            <div class="dropdown-item" data-value="<%= city %>" <%= 'data-selected="true"' if city == @user.last_city_id %>>
                              <%= city %>
                            </div>
                          </li>
                        <% end %>
                      </ul>
                    </div>
                  </div>
                </div>

                <%# Clubs dropdown %>
                <div class="w-full <%= 'hidden' unless @user.last_city_id.present? %>" id="clubs-container">
                  <div class="dropdown relative">
                    <button id="club-dropdown" type="button" 
                            class="w-full inline-flex justify-between items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500" 
                            aria-haspopup="true" 
                            aria-expanded="false">
                      <span class="selected-club">
                        <% if @user.last_club_id %>
                          <% selected_club = @clubs.find { |club| club['Id'] == @user.last_club_id } %>
                          <%= selected_club ? "#{selected_club['Name']} - #{selected_club['Address']}" : "Select a club..." %>
                        <% else %>
                          Select a club...
                        <% end %>
                      </span>
                      <svg class="h-5 w-5 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                    <div class="dropdown-menu hidden" role="menu">
                      <ul class="py-1">
                        <% @clubs.each do |club| %>
                          <li>
                            <div class="dropdown-item" 
                                 data-value="<%= club['Id'] %>" 
                                 data-city="<%= club.dig('City', 'Name') %>"
                                 <%= 'data-selected="true"' if club['Id'] == @user.last_club_id %>>
                              <%= club['Name'] %> - <%= club['Address'] %>
                            </div>
                          </li>
                        <% end %>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              <div class="mt-8 text-gray-600">
                <p class="text-sm">
                  Total clubs available: <%= @clubs.size %>
                </p>
              </div>

              <%# Move the table container here %>
              <div id="weekly-classes-container" class="mt-8 hidden">
                <div class="overflow-x-auto">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Day</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Hour</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Class</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Trainer</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Debug</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200" id="classes-table-body">
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
            
            <div class="pt-6 text-base leading-6 font-bold sm:text-lg sm:leading-7">
              <p class="text-gray-600 text-sm mt-8">
                Select a club from the dropdown to view available classes and make reservations.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<%# Remove the table container from here %>

<%# Update the JavaScript %>
<%= javascript_tag do %>
  // Fix the club ID retrieval in bookClassesWeekly function
  function bookClassesWeekly(classId, button, obj) {
    // Debug logs
    console.log('Selected club item:', document.querySelector('#clubs-container .dropdown-item[data-selected="true"]'));
    console.log('Last club ID:', <%= raw(@user.last_club_id.to_json) %>);
    
    // Try getting club ID from the last selected club
    const lastClubId = <%= raw(@user.last_club_id.to_json) %>;
    const clubId = lastClubId;

    if (!clubId) {
      alert('Please select a club first');
      return;
    }

    // Disable the button and show loading state
    const originalText = button.textContent;
    button.disabled = true;
    button.textContent = 'Booking...';

    fetch('/book', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({
        class_id: classId,
        club_id: clubId,
        next_occurrence: obj.StartTime,
        class_name: obj.Name,
        trainer_name: obj.Trainer
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        button.classList.remove('bg-indigo-600', 'hover:bg-indigo-700');
        button.classList.add('bg-green-600', 'hover:bg-green-700');
        button.textContent = 'Scheduled for booking!';
      } else {
        throw new Error(data.error);
      }
    })
    .catch(error => {
      button.disabled = false;
      button.textContent = originalText;
      alert(`Failed to book class: ${error.message}`);
    });
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Add renderClassesTable function
    function renderClassesTable(data) {
      const tableBody = document.getElementById('classes-table-body');
      tableBody.innerHTML = '';
      
      console.log('Rendering table with data:', data);
      
      if (!data || !Array.isArray(data)) {
        console.error('Invalid data structure:', data);
        tableBody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-4">No classes found or invalid data structure</td>
          </tr>
        `;
        return;
      }

      let hasClasses = false;
      console.log('bigdata', data)
      data.forEach(obj => {
            if (!obj || !obj.Id || !obj.Name) return;
            
            hasClasses = true;
            const row = document.createElement('tr');

            // Format the date
            const lang = window.navigator.language;
            const startTime = new Date(obj.StartTime);
            const startDow = startTime.toLocaleString(lang, {
              weekday: 'short'
            }).toUpperCase();
            const startHour = startTime.toLocaleString(lang, { hour: '2-digit', minute: '2-digit', hour12: false }).toUpperCase();
            const formattedDate = startTime.toLocaleString(lang, {
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
            }).replace(',', '');

            row.innerHTML = `
              <td>${startDow}</td>
              <td>${startHour}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${formattedDate}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                ${obj.Name}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${obj.Trainer}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <button 
                  class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded book-button"
                  data-class-id="${obj.Id}"
                  data-next-occurrence="${obj.StartTime}"
                >
                  Book automatically
                </button>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <button 
                  class="text-gray-500 hover:text-gray-700 debug-button"
                  title="Show debug info"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
                  </svg>
                </button>
              </td>
            `;
            tableBody.appendChild(row);

            // Add click event listener to the button
            const button = row.querySelector('.book-button');
            button.addEventListener('click', function() {
              bookClassesWeekly(obj.Id, this, obj);
            });

            // Add click event listener for the debug button
            const debugButton = row.querySelector('.debug-button');
            debugButton.addEventListener('click', function() {
              console.log('Class object:', JSON.stringify(obj, null, 2));
            });
      });

      if (!hasClasses) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="4" class="text-center py-4">No classes found for this club</td>
          </tr>
        `;
      }
    }

    // Add loadWeeklyClasses function
    function loadWeeklyClasses(clubId) {
      const weeklyClassesContainer = document.getElementById('weekly-classes-container');
      weeklyClassesContainer.classList.remove('hidden');

      const tableBody = document.getElementById('classes-table-body');
      tableBody.innerHTML = `
        <tr>
          <td colspan="4" class="text-center py-4">Loading classes...</td>
        </tr>
      `;

      fetch(`/weekly_classes?club_id=${clubId}`)
        .then(response => response.json())
        .then(data => {
          if (data.error) {
            throw new Error(data.error);
          }
          console.log('Received data:', data);
          renderClassesTable(data);
        })
        .catch(error => {
          tableBody.innerHTML = `
            <tr>
              <td colspan="4">
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative">
                  Failed to load classes: ${error.message}
                </div>
              </td>
            </tr>
          `;
        });
    }

    // Initialize dropdowns if there's a last selected city
    const lastCity = <%= raw(@user.last_city_id.to_json) %>;
    const lastClubId = <%= raw(@user.last_club_id.to_json) %>;
    
    if (lastCity) {
      // Show clubs container
      const clubsContainer = document.getElementById('clubs-container');
      clubsContainer.classList.remove('hidden');
      
      // Filter club options
      const clubItems = document.querySelectorAll('#clubs-container .dropdown-item');
      clubItems.forEach(item => {
        const showOption = item.dataset.city === lastCity;
        item.closest('li').style.display = showOption ? '' : 'none';
      });

      // If there's a last selected club, set it up
      if (lastClubId) {
        const selectedClubItem = document.querySelector(`#clubs-container .dropdown-item[data-value="${lastClubId}"]`);
        if (selectedClubItem) {
          // Set the club dropdown text
          const clubButton = document.getElementById('club-dropdown');
          clubButton.querySelector('span').textContent = selectedClubItem.textContent;
          
          // Load the classes
          loadWeeklyClasses(lastClubId);
        }
      }
    }

    // Update the setupDropdown function
    function setupDropdown(buttonId, onSelect) {
      const button = document.getElementById(buttonId);
      const menu = button.nextElementSibling;
      const selectedText = button.querySelector('span');
      const arrow = button.querySelector('svg');
      
      function closeAllDropdowns() {
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
          menu.classList.add('hidden');
          menu.classList.remove('show');
          const btn = menu.previousElementSibling;
          if (btn) {
            btn.setAttribute('aria-expanded', 'false');
            const arrow = btn.querySelector('svg');
            if (arrow) arrow.style.transform = '';
          }
        });
      }

      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          closeAllDropdowns();
        } else {
          closeAllDropdowns();
          menu.classList.remove('hidden');
          menu.classList.add('show');
          button.setAttribute('aria-expanded', 'true');
          arrow.style.transform = 'rotate(180deg)';
        }
      });

      menu.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Remove data-selected from all items
          menu.querySelectorAll('.dropdown-item').forEach(i => i.removeAttribute('data-selected'));
          // Set data-selected on clicked item
          item.setAttribute('data-selected', 'true');
          
          selectedText.textContent = item.textContent;
          closeAllDropdowns();
          onSelect(item.dataset.value);
        });
      });

      // Close when clicking outside
      document.addEventListener('click', (e) => {
        if (!button.contains(e.target) && !menu.contains(e.target)) {
          closeAllDropdowns();
        }
      });
    }

    // Setup dropdowns
    setupDropdown('city-dropdown', (cityValue) => {
      const clubsContainer = document.getElementById('clubs-container');
      clubsContainer.classList.toggle('hidden', !cityValue);
      
      // Reset club dropdown text
      const clubButton = document.getElementById('club-dropdown');
      clubButton.querySelector('span').textContent = 'Select a club...';
      
      const clubItems = document.querySelectorAll('#clubs-container .dropdown-item');
      clubItems.forEach(item => {
        const showOption = !cityValue || item.dataset.city === cityValue;
        item.closest('li').style.display = showOption ? '' : 'none';
      });

      fetch('/update_location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          city_id: cityValue,
          club_id: null
        })
      });
    });

    setupDropdown('club-dropdown', (clubId) => {
      if (!clubId) return;
      
      const cityValue = document.querySelector('.selected-city').textContent;
      
      fetch('/update_location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        },
        body: JSON.stringify({
          city_id: cityValue,
          club_id: clubId
        })
      });

      loadWeeklyClasses(clubId);
    });
  });
<% end %> 